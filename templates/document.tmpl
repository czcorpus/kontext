#*
Copyright (c) 2003-2009  Pavel Rychly
Copyright (c) 2013 Charles University in Prague, Faculty of Arts,
                   Institute of the Czech National Corpus
Copyright (c) 2013 Tomas Machalek <tomas.machalek@gmail.com>

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2
dated June, 1991.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*#
#encoding UTF-8
#import urllib
#import re
#from templating.filters import *
#from translation import ugettext as _
##
<!DOCTYPE html>
<html>
#filter WebSafe
<head>
<title>$title</title>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="icon" type="image/x-icon" href="$files_path/img/favicon.ico" />
#for $font in $theme.online_fonts
<link href='$font' rel='stylesheet' type='text/css'>
#end for
#end filter

#for $item in $app_bar_css
<link rel="stylesheet" type="text/css" href="$item.url" />
#end for
#if $footer_bar_css
<link rel="stylesheet" type="text/css" href="$footer_bar_css" />
#end if
#for $online_css_item in $theme.online_css
<link rel="stylesheet" type="text/css" href="$online_css_item" />
#end for

#if $debug
<link rel="stylesheet/less" type="text/css" href="$files_path/css/kontext.less" />
<link rel="stylesheet/less" type="text/css" href="$files_path/css/view.less" />
<link rel="stylesheet/less" type="text/css" href="$files_path/css/widgets.less" />
#if $theme.css
<link rel="stylesheet" type="text/css" href="$theme.css" />
#end if
#else
<link rel="stylesheet" type="text/css" href="$files_path/css/kontext.min.css#if $deployment_id#?v=$deployment_id#end if#" />
#end if
<noscript>
    <link rel="stylesheet" type="text/css" href="${files_path}/css/main-menu.css" />
</noscript>
#if $qunit_test
<link rel="stylesheet" type="text/css" href="$files_path/css/qunit.css" />
#end if

<script type="text/javascript" src="$files_path/js/vendor/modernizr.custom.min.js"></script>
#if $debug
<script type="text/javascript" src="$files_path/js/vendor/less.min.js"></script>
#end if
<script type="text/javascript" src="$files_path/js/min/vendor/requirejs.min.js"></script>
#if $intl_polyfill_url
<script type="text/javascript">
if(!window.Intl)try{var hd=document.getElementsByTagName("head")[0],sc=window.document.createElement("script");sc.type="text/javascript",sc.src="${intl_polyfill_url}",hd.appendChild(sc)}catch(a){console.error(a)}
</script>
#end if
<script type="text/javascript" src="$files_path/js/min/vendor/intl.min.js"></script>
<script type="text/javascript" src="$files_path/js/min/vendor/common.js#if $deployment_id#?v=$deployment_id#end if#"></script>
#block headers
#end block

<script type="text/javascript">
var missingPlugins = [],
    paths = {};

#for $plugin_id, $plugin_path in $plugin_js.items()
#if $plugin_path
paths['plugins/$camelize($plugin_id)'] = './plugins/$plugin_path';
#else
missingPlugins.push('plugins/$camelize(plugin_id)/init');
#end if
#end for

#if $qunit_test
paths['vendor/QUnit'] = './vendor/qunit';
#end if

#if $app_bar_js
#if $app_bar_js.main
paths['plugins/applicationBar/toolbar'] = '$app_bar_js.main';
#end if
#for $item in $app_bar_js.deps
paths['$item.module'] = '$item.url';
#end for
#end if

requirejs.config({
    baseUrl : '${files_path}/js/min',
    paths: paths,
    #if $deployment_id#urlArgs: 'v=$deployment_id',#end if#
    shim : {
        #if $qunit_test
        'vendor/QUnit' : {
            exports : 'QUnit',
            init: function() {
                QUnit.config.autoload = false;
                QUnit.config.autostart = false;
            },
        }
        #end if
        #if $app_bar_js
        #for $item in $app_bar_js.deps
        #if 'shim' in $item
        '$item.module' : { deps: $to_json($item.shim.deps) },
        #end if
        #end for
        #end if
    }
});

require(['vendor/rsvp'], function (RSVP) {
    missingPlugins.forEach(function (pluginPath) {
        define(pluginPath, [], function () {
            var plg = {
                getViews : function () { return {}; },
                create : function () {
                    return new RSVP.Promise(function (fulfill, reject) {
                        fulfill(null);
                    });
                }
            };
            plg.default = plg;
            return plg;
        });
    });
});

define('win', [], function () { return window; });

define('conf', [], function () {
    var conf = {};
    conf.page = {};
    conf.activePlugins = $to_json($active_plugins);
    conf.messageAutoHideInterval = $getVar('message_auto_hide_interval', 5000);
    conf.rootURL = "$root_url";
    conf.rootPath = "$root_url";
    conf.staticPath = "$files_path";
    conf.corpname = "$corpname";
    conf.subcorpname = #if $getVar('usesubcorp')#"$usesubcorp"#else# null#end if#;
    conf.baseAttr = "${base_attr}";
    conf.currentAction = "$current_action";
    conf.humanCorpname = "$human_corpname";
    conf.anonymousUser = #if $_anonymous#true#else#false#end if#;
    conf.loginUrl = "$login_url";
    conf.bibConf = $bib_conf.to_json();
    conf.currentArgs = $Globals.to_json();
    conf.compiledQuery = $to_json($Q);
    conf.concPersistenceOpId = $to_json($conc_persistence_op_id);
    conf.uiLang = "$uiLang";
    conf.isDebug = #if $debug#true#else#false#end if#;
    conf.uiStateTTL = ${ui_state_ttl};
    conf.historyMaxQuerySize = ${history_max_query_size};
    #if $varExists('aligned_corpora')
    conf.alignedCorpora = [ #filter $Join#${aligned_corpora, mask='"%s"'}#end filter# ];
    #end if
    conf.availableAlignedCorpora = $to_json($getVar('Aligned', []));
    conf.pluginData = $to_json($plugin_data);
    conf.notifications = $to_json($messages);
    conf.queryHints = [
        "$_('You can use the \\u0022down arrow\\u0022 key to view recent queries')",
        "$_('In CQL mode you can use Shift+ENTER to enter a new line')"
    ];
    conf.queryTypesHints = {
        iqueryrow : "$_('Query type <em>basic</em> is suitable for getting to know the corpus. It searches for the input expression as a word form case-insensitively; if it is also a canonical dictionary form (lemma), all its word forms are searched as well.')"
    };
    conf.ttIntervalChars = $to_json($getVar('interval_chars', []));
    conf.menuData = $to_json($menu_data);
    conf.asyncTasks = $to_json($async_tasks);
    conf.ShowConcToolbar = $to_json($use_conc_toolbar);
    conf.queryOverview = $to_json($getVar('query_overview', []));
    conf.numQueryOps = $to_json($len($getVar('query_overview', [])));
    conf.ShuffleMinResultWarning = $to_json($shuffle_min_result_warning);

    return conf;
});
</script>
</head>
<body>
#if $qunit_test
<div id="qunit"></div>
<div id="qunit-fixture">
#end if

#filter WebSafe
<div id="common-bar">
#if $app_bar
#filter None
    $app_bar
#end filter
#else
<span class="user">$_("User"):
    #if not $_anonymous
        $user_info.fullname
        (<a href="$logout_url">$_('logout')</a>)
    #else
        $user_info.fullname
        <a href="$login_url">($_('login'))</a>
    #end if
</span>
#end if
</div>

<header id="topbar">
    <div class="navig-wrapper">
        <div id="menu-bar">
            <a id="logo-wrapper" href="$theme.logo_href"><img id="logo-image" class="over-img"
                src="$theme.logo_path"
                alt="Kontext logo"
                title="$theme.logo_title"
                style="$theme.logo_inline_css"
                data-alt-img="$theme.logo_mouseover_path" /></a>
            <div id="main-menu-mount">
                <ul id="menu-level-1">
                #for $menu_item in $static_menu#<li class="#if $menu_item.disabled#disabled#end if#"><a class="trigger"
                    #if $menu_item.action#href=${root_url}${menu_item.action}#end if#>$menu_item.label</a></li>#end for#
                </ul>
            </div>
        </div>
        #if $corpname
        #block state_navigation
        #filter None
        $query_overview_bar()
        #end filter
        #end block
        #end if

    </div> ## navig wrapper
</header>
#end filter

#filter WebSafe
<div id="content">
    <div class="messages-mount"></div>

    #filter None
    #block concordance
    #end block

    #block main
    #end block
    #end filter
</div>

<footer #if $footer_bar#class="custom-footer"#end if#>
    #if $debug
    <div class="debug-warning">
    $_('debugging mode')
    </div>
    #end if

    #if $footer_bar
        #filter None
        $footer_bar
        #end filter
    #else
        #if $len($avail_languages) > 0
        <div id="switch-language-box">$_("user interface languages"):
            #set $i = 0
            <form id="language-switch-form" action="${root_url}user/switch_language" method="POST">
                <input class="language" type="hidden" name="language" />
                <input class="continue" type="hidden" name="continue" />
                #for $lang in $avail_languages
                <a data-lang="$lang[0]">$lang[1].get('label', $lang[0])</a>#if $i < $len($avail_languages) - 1# | #end if#
                #set $i = $i + 1
                #end for
            </form>
        </div>
        #end if
        <div>
            <div id="copyright-info">
                &copy; <a href="http://www.korpus.cz/">Institute of the Czech National Corpus</a>,
                &copy; <a href="http://www.sketchengine.co.uk/">Lexical Computing Ltd.</a>,
                &copy; <a href="http://nlp.fi.muni.cz/">NLP Centre FI MU</a>
            </div>
            <div id="app-version">
                $_('version') <strong>$_version[1]</strong>, $_('uses') manatee-<span>$_version[0]</span>
            </div>

            #if $error_report_url:
            <div id="error-reporting"><a href="$error_report_url" target="_blank">$_('Report an error')</a></div>
            #end if
        </div>
    #end if
</footer>
#end filter

#if $qunit_test
</div>
#end if

<script type="text/javascript">
#block bodyonload
require(['${client_model_dir}/document', 'conf'], function (layoutModel, conf) {
    new layoutModel.PageModel(conf).init();
});
#end block
</script>

</body>
</html>

## ******** Common methods definitions ******** ##


## ***************************************** ##
#def input_hidden($exclude=())
    ## Argument to keep current concordance
    #for $g_name, $g_value in $Globals.items()
      #if not $g_name in $exclude
        #for $v in $g_value:
            <input type="hidden" name="$g_name" value="${v, also='"'}" />
        #end for
      #end if
    #end for
#end def

## ***************************************** ##
#def $human_corpsize()
#filter $FloatFormatter#$corp_size#end filter##slurp
#end def

#def query_overview_bar()
<section class="corpus-and-query">
    <div id="query-overview-mount"></div>
</section>
#end def
