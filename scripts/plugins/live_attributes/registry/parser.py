#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# CAVEAT UTILITOR
# This file was automatically generated by Grako.
#    https://bitbucket.org/apalala/grako/
# Any changes you make to it will be overwritten the
# next time the file is generated.
#

from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import * # noqa
from grako.exceptions import * # noqa


__version__ = '14.120.09.31.48'


class reg_grammarParser(Parser):
    def __init__(self, whitespace=None, **kwargs):
        super(reg_grammarParser, self).__init__(whitespace=whitespace, **kwargs)

    @rule_def
    def _attribute_(self):
        self._token('ATTRIBUTE')

    @rule_def
    def _structure_(self):
        self._token('STRUCTURE')

    @rule_def
    def _key_(self):
        self._pattern(r'[A-Z0-9]+')

    @rule_def
    def _val_(self):
        self._pattern(r'[\w/\.\-=|_:,\*@]+')

    @rule_def
    def _complexval_(self):
        self._pattern(r'[\w/\.\-=|_:,\*\s@]+')

    @rule_def
    def _id_(self):
        self._pattern(r'[a-zA-Z_]+')

    @rule_def
    def _lbracket_(self):
        self._token('{')

    @rule_def
    def _rbracket_(self):
        self._token('}')

    @rule_def
    def _quot_(self):
        self._token('"')

    @rule_def
    def _emptyline_(self):
        self._pattern(r'\s+')

    @rule_def
    def _attrspec_(self):
        self._attribute_()
        self._id_()

    @rule_def
    def _structspec_(self):
        self._structure_()
        self._id_()

    @rule_def
    def _structrule_(self):
        self._structspec_()
        self._lbracket_()
        def block0():
            self._attrrule_()
        self._positive_closure(block0)

        self._rbracket_()

    @rule_def
    def _attrrule_(self):
        with self._choice():
            with self._option():
                self._attrspec_()
                self._lbracket_()
                def block0():
                    self._keyval_()
                self._positive_closure(block0)

                self._rbracket_()
            with self._option():
                self._attribute_()
                self._id_()
            self._error('no available options')

    @rule_def
    def _keyval_(self):
        with self._choice():
            with self._option():
                self._key_()
                self._quot_()
                self._complexval_()
                self._quot_()
            with self._option():
                self._key_()
                self._val_()
            self._error('no available options')

    @rule_def
    def _conf_(self):
        def block0():
            with self._choice():
                with self._option():
                    self._structrule_()
                with self._option():
                    self._attrrule_()
                with self._option():
                    self._keyval_()
                with self._option():
                    self._emptyline_()
                self._error('no available options')
        self._positive_closure(block0)


class reg_grammarSemanticParser(CheckSemanticsMixin, reg_grammarParser):
    pass


class reg_grammarSemantics(object):
    def attribute(self, ast):
        return ast

    def structure(self, ast):
        return ast

    def key(self, ast):
        return ast

    def val(self, ast):
        return ast

    def complexval(self, ast):
        return ast

    def id(self, ast):
        return ast

    def lbracket(self, ast):
        return ast

    def rbracket(self, ast):
        return ast

    def quot(self, ast):
        return ast

    def emptyline(self, ast):
        return ast

    def attrspec(self, ast):
        return ast

    def structspec(self, ast):
        return ast

    def structrule(self, ast):
        return ast

    def attrrule(self, ast):
        return ast

    def keyval(self, ast):
        return ast

    def conf(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = reg_grammarParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in reg_grammarParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for reg_grammar.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace, whitespace=args.whitespace)
